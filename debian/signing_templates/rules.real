SHELL := bash -e

export DH_OPTIONS

KERNELRELEASE_VERSION := @signedtemplate_binaryversion@
GENCONTROL_ARGS := -v${KERNELRELEASE_VERSION}
BUILDDEB_ARGS := -Zxz $(if $(filter pkg.linux.quick,$(DEB_BUILD_PROFILES)),-z0)

build-indep:

build_image:

binary_image: KERNELRELEASE = $(KERNELRELEASE_VERSION)$(LOCALVERSION)
binary_image: DH_OPTIONS = -p$(PACKAGE_NAME)
binary_image: IMAGE_PACKAGE_NAME = linux-image-$(ABINAME)$(LOCALVERSION)-unsigned
binary_image: PACKAGE_DIR = debian/$(PACKAGE_NAME)
binary_image: SIGNATURE_DIR = debian/signatures/$(IMAGE_PACKAGE_NAME)
binary_image:
	mkdir -p $(PACKAGE_DIR)/boot
	rsync -a $(patsubst %,/boot/%-$(KERNELRELEASE),config System.map $(IMAGE_INSTALL_STEM)) \
		$(PACKAGE_DIR)/boot/
	if [ -f $(SIGNATURE_DIR)/boot/vmlinuz-$(KERNELRELEASE).sig ]; then \
		sbattach --attach $(SIGNATURE_DIR)/boot/vmlinuz-$(KERNELRELEASE).sig \
			$(PACKAGE_DIR)/boot/vmlinuz-$(KERNELRELEASE); \
		echo >> debian/$(PACKAGE_NAME).substvars 'signed:Description=The kernel image and modules are signed for use with Secure Boot.'; \
	else \
		echo >> debian/$(PACKAGE_NAME).substvars 'signed:Description=The modules are signed.'; \
	fi
	mkdir -p $(PACKAGE_DIR)/lib/modules/$(KERNELRELEASE)
	rsync -a $(addprefix /lib/modules/$(KERNELRELEASE)/,kernel modules.builtin modules.builtin.modinfo modules.order) \
		$(PACKAGE_DIR)/lib/modules/$(KERNELRELEASE)/
# Copy any device tree files
	if [ -d /usr/lib/linux-image-$(KERNELRELEASE) ]; then \
		mkdir -p $(PACKAGE_DIR)/usr/lib/linux-image-$(KERNELRELEASE); \
		rsync -a /usr/lib/linux-image-$(KERNELRELEASE)/ \
			$(PACKAGE_DIR)/usr/lib/linux-image-$(KERNELRELEASE)/; \
	fi
# Copy bug scripts but change the info file to refer to the right package
	mkdir -p $(PACKAGE_DIR)/usr/share/bug/$(PACKAGE_NAME)
	rsync -a /usr/share/bug/$(IMAGE_PACKAGE_NAME)/ \
		$(PACKAGE_DIR)/usr/share/bug/$(PACKAGE_NAME)/
	sed -i -e 's/^PACKAGE_NAME=.*/PACKAGE_NAME=$(PACKAGE_NAME)/' \
		-e 's/^PACKAGE_VERSION=.*/PACKAGE_VERSION=$(PACKAGE_VERSION)/' \
		$(PACKAGE_DIR)/usr/share/bug/$(PACKAGE_NAME)/info
	dh_install
	dh_installchangelogs
	ln -sf linux-image.NEWS debian/$(PACKAGE_NAME).NEWS
	dh_installdocs
	dh_lintian
	dh_compress
	dh_fixperms
	dh_installdeb --define VERSION=$(KERNELRELEASE_VERSION)
	dh_gencontrol -- $(GENCONTROL_ARGS)
	dh_md5sums
	dh_builddeb -- $(BUILDDEB_ARGS)

build_meta:

binary_meta:
	dh_testdir
	dh_prep
	dh_bugfiles
	dh_installdocs --link-doc=$(INSTALLDOCS_LINK_DOC)
	dh_lintian
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_gencontrol -- $(GENCONTROL_ARGS)
	dh_md5sums
	dh_builddeb -- $(BUILDDEB_ARGS)

build_installer:

binary_installer: KERNELRELEASE = $(KERNELRELEASE_VERSION)$(LOCALVERSION)
binary_installer: export KW_DEFCONFIG_DIR=/usr/share/linux-support-$(ABINAME)/installer
binary_installer: export KW_CONFIG_DIR=/usr/share/linux-support-$(ABINAME)/installer
# XXX No make dependency exists for this directory
binary_installer: export SOURCEDIR = debian/linux-image-$(REAL_VERSION)
binary_installer: DH_OPTIONS_IMAGE = -p$(IMAGE_PACKAGE_NAME) --sourcedir=$(SOURCEDIR)
binary_installer:
	dh_testdir
	dh_prep
	DH_OPTIONS="$(DH_OPTIONS_IMAGE)" dh_install boot/$(IMAGE_INSTALL_STEM)-$(KERNELRELEASE)
	DH_OPTIONS="$(DH_OPTIONS_IMAGE)" dh_install lib/modules/$(KERNELRELEASE)/modules.builtin
	DH_OPTIONS="$(DH_OPTIONS_IMAGE)" dh_install lib/modules/$(KERNELRELEASE)/modules.order
ifneq ($(filter arm64 armel armhf mipsel mips64el mipsr6 mipsr6el mips64r6 mips64r6el riscv64,$(ARCH)),)
	DH_OPTIONS="$(DH_OPTIONS_IMAGE)" dh_install usr/lib/linux-image-$(KERNELRELEASE)
endif
	kernel-wedge copy-modules $(ABINAME) $(FLAVOUR) $(KERNELRELEASE)
	kernel-wedge find-dups $(KERNELRELEASE)
	kernel-wedge find-unpackaged $(KERNELRELEASE) $(KERNELRELEASE)
	kernel-wedge check $$(dh_listpackages)
	dh_fixperms
	dh_gencontrol -- $(GENCONTROL_ARGS)
	dh_builddeb -- $(BUILDDEB_ARGS)

.PHONY: build_% binary_%
